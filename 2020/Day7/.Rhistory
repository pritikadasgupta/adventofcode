bad_library <- c(bad_numbers,bad_words)
bad_library
#for each element in the second half of the statement
for(x in a1_2){
bags <- append(bags,strsplit(a1[1]," bags ")[[1]])
to_bag_num <- append(to_bag_num,as.numeric(strsplit(x, "\\D+")[[1]][[2]]))
list_words <- strsplit(x," ")[[1]]
type <- list_words[!list_words %in% bad_library]
to_bag <- append(to_bag,paste(type,collapse=" "))
}
#!/usr/bin/env Rscript
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load in data
# data1 <- readLines(file("stdin")) #read in file
setwd("~/Documents/adventofcode1/adventofcode/2020/Day7")
data1 <- readLines("exercise7.input.txt") #read in file
#-------------------
#PART 1
#-------------------
#Clean up data
# data2 <- paste(data1,collapse = "\n") #concatenate everything into one string
# data3 <- strsplit(data2,"\n\n")[[1]] #find where there are two new lines to separate btwn blanks
# data4 <- gsub("\n"," ",data3) #get rid of the \n
a <- data1[1]
a1 <- strsplit(a,"contain")[[1]] #split on contain
a1_2 <- strsplit(a1[2]," bags, ")[[1]]
a1_2
bags <- vector()
to_bag <- vector()
to_bag_num <- vector()
numbers <- list()
for(i in data1){
numbers <- append(numbers,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(i)), "")))))
}
numbers1 <- unlist(numbers)
bad_numbers <- seq(min(numbers1),max(numbers1),1)
bad_words <- c(" ","","bag.","bags.","bag","bags")
bad_library <- c(bad_numbers,bad_words)
#for each element in the second half of the statement
for(x in a1_2){
bags <- append(bags,strsplit(a1[1]," bags ")[[1]])
to_bag_num <- append(to_bag_num,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(x)), "")))))
list_words <- strsplit(x," ")[[1]]
type <- list_words[!list_words %in% bad_library]
to_bag <- append(to_bag,paste(type,collapse=" "))
}
bags
to_bag_num
to_bag
to_bag[2]
#!/usr/bin/env Rscript
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load in data
# data1 <- readLines(file("stdin")) #read in file
setwd("~/Documents/adventofcode1/adventofcode/2020/Day7")
data1 <- readLines("exercise7.input.txt") #read in file
#-------------------
#PART 1
#-------------------
#Clean up data
bags <- vector()
to_bag <- vector()
to_bag_num <- vector()
for(a in data1){
a1 <- strsplit(a,"contain")[[1]] #split on contain
a1_2 <- strsplit(a1[2]," bags, ")[[1]]
numbers <- list()
for(i in data1){
numbers <- append(numbers,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(i)), "")))))
}
numbers1 <- unlist(numbers)
bad_numbers <- seq(min(numbers1),max(numbers1),1)
bad_words <- c(" ","","bag.","bags.","bag","bags")
bad_library <- c(bad_numbers,bad_words)
#for each element in the second half of the statement
for(x in a1_2){
bags <- append(bags,strsplit(a1[1]," bags ")[[1]])
to_bag_num <- append(to_bag_num,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(x)), "")))))
list_words <- strsplit(x," ")[[1]]
type <- list_words[!list_words %in% bad_library]
to_bag <- append(to_bag,paste(type,collapse=" "))
}
}
df <- paste(bags,to_bag_num,to_bag)
df <- as.data.frame(paste(bags,to_bag_num,to_bag))
View(df)
df <- as.data.frame(cbind(bags,to_bag_num,to_bag))
View(df)
bags <- vector()
to_bag <- vector()
to_bag_num <- vector()
for(a in data1){
a1 <- strsplit(a,"contain")[[1]] #split on contain
a1_2 <- strsplit(a1[2]," bags, ")[[1]]
numbers <- list()
for(i in data1){
numbers <- append(numbers,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(i)), "")))))
}
numbers1 <- unlist(numbers)
bad_numbers <- seq(min(numbers1),max(numbers1),1)
bad_words <- c(" ","","bag.","bags.","bag","bags")
bad_library <- c(bad_numbers,bad_words)
#for each element in the second half of the statement
for(x in a1_2){
bags <- append(bags,strsplit(a1[1]," bags ")[[1]])
to_bag_num <- append(to_bag_num,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(x)), "")))))
list_words <- strsplit(x," ")[[1]]
type <- list_words[!list_words %in% bad_library]
to_bag <- append(to_bag,paste(type,collapse=" "))
}
}
a1_2
strsplit(a1_2," bag, ")[[1]]
strsplit(a1_2," bag, ")
unlist(strsplit(a1_2," bag, "))
is.na(numbers)
unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist("no other")), ""))))
exa <- unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist("no other")), ""))))
append(to_bag_num,exa)
#!/usr/bin/env Rscript
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load in data
# data1 <- readLines(file("stdin")) #read in file
setwd("~/Documents/adventofcode1/adventofcode/2020/Day7")
data1 <- readLines("exercise7.input.txt") #read in file
#-------------------
#PART 1
#-------------------
#Clean up data
bags <- vector()
to_bag <- vector()
to_bag_num <- vector()
for(a in data1){
a1 <- strsplit(a,"contain")[[1]] #split on contain
a1_2 <- strsplit(a1[2]," bags, ")[[1]]
a1_2 <- unlist(strsplit(a1_2," bag, "))
numbers <- list()
for(i in data1){
numbers <- append(numbers,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(i)), "")))))
}
numbers1 <- unlist(numbers)
bad_numbers <- seq(min(numbers1),max(numbers1),1)
bad_words <- c(" ","","bag.","bags.","bag","bags")
bad_library <- c(bad_numbers,bad_words)
#for each element in the second half of the statement
for(x in a1_2){
bags <- append(bags,strsplit(a1[1]," bags ")[[1]])
numberofbags <- unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(x)), ""))))
to_bag_num <- append(to_bag_num,numberofbags)
list_words <- strsplit(x," ")[[1]]
type <- list_words[!list_words %in% bad_library]
to_bag <- append(to_bag,paste(type,collapse=" "))
}
}
df <- as.data.frame(cbind(bags,to_bag_num,to_bag))
to_bag_num <- append(to_bag_num,numeric(0))
numeric(0)+0
numeric(0)+0+1
as.numeric(numeric(0))
as.character(numeric(0))
numberofbags <- unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist("no other")), ""))))
if(numberofbags==numeric(0)){
numberofbags == 0
}
if(length(numberofbags)==0){
numberofbags == 0
}
isEmpty <- function(x) {
return(length(x)==0)
}
if(isEmpty(numberofbags)){
numberofbags == 0
}
append(numeric(0),0)
append(1,0)
#!/usr/bin/env Rscript
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load in data
# data1 <- readLines(file("stdin")) #read in file
setwd("~/Documents/adventofcode1/adventofcode/2020/Day7")
data1 <- readLines("exercise7.input.txt") #read in file
#-------------------
#PART 1
#-------------------
#Clean up data
bags <- vector()
to_bag <- vector()
to_bag_num <- vector()
for(a in data1){
a1 <- strsplit(a,"contain")[[1]] #split on contain
a1_2 <- strsplit(a1[2]," bags, ")[[1]]
a1_2 <- unlist(strsplit(a1_2," bag, "))
numbers <- list()
for(i in data1){
numbers <- append(numbers,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(i)), "")))))
}
numbers1 <- unlist(numbers)
bad_numbers <- seq(min(numbers1),max(numbers1),1)
bad_words <- c(" ","","bag.","bags.","bag","bags")
bad_library <- c(bad_numbers,bad_words)
isEmpty <- function(x) {
return(length(x)==0)
}
#for each element in the second half of the statement
for(x in a1_2){
bags <- append(bags,strsplit(a1[1]," bags ")[[1]])
numberofbags <- unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(x)), ""))))
numberofbags <- append(numberofbags,0)[1]
to_bag_num <- append(to_bag_num,numberofbags)
list_words <- strsplit(x," ")[[1]]
type <- list_words[!list_words %in% bad_library]
to_bag <- append(to_bag,paste(type,collapse=" "))
}
}
df <- as.data.frame(cbind(bags,to_bag_num,to_bag))
View(df)
## Load package
library(igraph)
graph(from=df$bags,to=df$to_bag,edges=df$to_bag_num)
net <- network(from=df$bags,to=df$to_bag,edges=df$to_bag_num)
help(igraph)
View(df)
which(df$bags=="gold")
View(df)
which(df$bags=="shiny gold")
which(df$to_bag=="shiny gold")
#Part 1:
# How many bag colors can eventually contain at least one shiny gold bag?
bag_list <- unique(df$bags) #initial list of bags that can contain stuff
bag_list1 <- bag_list[!which(df$bags=="shiny gold")] #subtract: what bags shiny gold bags contain
which(df$bags=="shiny gold")
bag_list1 <- unique(df$bags[!which(df$bags=="shiny gold")]) #subtract: what bags shiny gold bags contain
#Part 1:
# How many bag colors can eventually contain at least one shiny gold bag?
bag_list <- unique(df$bags) #initial list of bags that can contain stuff
bag_list1 <- unique(df$bags[!which(df$bags=="shiny gold")]) #subtract: what bags shiny gold bags contain
for(x in 1:nrow(df)){
print(x)
}
which(df$to_bag_num==0)
df_nozeros <- df[!which(df$to_bag_num==0)]
df_nozeros <- df[!which(df$to_bag_num==0),]
df_nozeros <- df[df$to_bag_num!=0,]
View(df)
df_nozeros <- df[df$to_bag_num!=0,c(1,3)]
View(df_nozeros)
graph(from=df_nozeros$bags,to=df_nozeros$to_bag)
df_nozeros <- df[df$to_bag_num!=0,c(1,3)] #edge-list of bags
data.matrix(df_nozeros)
graph(edges=data.matrix(df_nozeros))
plot(net, vertex.size=0, vertex.label=NA, edge.arrow.size=0 )
# data.matrix(df_nozeros)
net <- graph(edges=data.matrix(df_nozeros))
plot(net, vertex.size=0, vertex.label=NA, edge.arrow.size=0 )
plot(net, vertex.size=0, edge.arrow.size=0 )
data.matrix(df_nozeros)
mat_nozeros <- as.matrix(df_nozeros)
View(mat_nozeros)
mat_nozeros <- as.matrix(df_nozeros)
net <- graph(edges=mat_nozeros)
plot(net, vertex.size=0, edge.arrow.size=0 )
net1<-graph.data.frame(mat_nozeros, directed=F)
df_nozeros <- df[df$to_bag_num!=0,c(1,3)] #edge-list of bags
mat_nozeros <- as.matrix(df_nozeros)
net1<-graph.data.frame(mat_nozeros, directed=F)
# net <- graph(edges=mat_nozeros)
# plot(net, vertex.size=0, edge.arrow.size=0 )
# Inspect the data:
V(net1) #prints the list of vertices (bags)
E(net1) #prints the list of edges (relationships)
degree(net1) #print the number of edges per vertex (relationships per bag)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(net1)
bad.vs<-V(net1)[degree(net1)<3] #identify those vertices part of less than three edges
net1 <- V(net1)
V(net1)$name
V(net1)
net1<-graph.data.frame(mat_nozeros, directed=F)
# net <- graph(edges=mat_nozeros)
# plot(net, vertex.size=0, edge.arrow.size=0 )
# Inspect the data:
V(net1) #prints the list of vertices (bags)
V(net1)=="muted tomato"
V(net1)$color<-ifelse(V(net1)$name=='shiny gold') #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
V(net1)$color<-ifelse(V(net1)=='shiny gold') #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
V(net1)$color<-ifelse(V(net1)=='shiny gold',"gold") #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
V(net1)$color<-ifelse(V(net1)=='shiny gold',"gold","black") #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
V(net1)$color<-ifelse(V(net1)$name=='shiny gold',"gold","black") #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
V(net1)$color<-ifelse(V(net1)$name=='shiny gold',"red","black") #useful for highlighting certain people. Works by matching the name attribute of the vertex to the one specified in the 'ifelse' expression
V(net1)$color<-ifelse(V(net1)$name=='shiny gold',"red","black")
par(mai=c(0,0,1,0))             #this specifies the size of the margins. the default settings leave too much free space on all sides (if no axes are printed)
plot(net1,                #the graph to be plotted
layout=layout.fruchterman.reingold,    # the layout method. see the igraph documentation for details
main='Organizational network example',    #specifies the title
vertex.label.dist=0.5,            #puts the name labels slightly off the dots
vertex.frame.color='blue',         #the color of the border of the dots
vertex.label.color='black',        #the color of the name labels
vertex.label.font=2,            #the font of the name labels
vertex.label=V(net1)$name,        #specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1            #specifies the size of the font of the labels. can also be made to vary
)
png(filename="org_network.png", height=800, width=600) #call the png writer
dev.off()
V(net1)$color<-ifelse(V(net1)$name=='shiny gold',"gold","black")
par(mai=c(0,0,1,0))             #this specifies the size of the margins. the default settings leave too much free space on all sides (if no axes are printed)
plot(net1,                #the graph to be plotted
layout=layout.fruchterman.reingold,    # the layout method. see the igraph documentation for details
main='Handy Haversacks',    #specifies the title
vertex.label.dist=0.5,            #puts the name labels slightly off the dots
vertex.frame.color='blue',         #the color of the border of the dots
vertex.label.color='black',        #the color of the name labels
vertex.label.font=1,            #the font of the name labels
vertex.label=V(net1)$name,        #specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1            #specifies the size of the font of the labels. can also be made to vary
)
png(filename="org_network.png", height=800, width=600) #call the png writer
dev.off()
plot(net1,                #the graph to be plotted
layout=layout.fruchterman.reingold,    # the layout method. see the igraph documentation for details
main='Handy Haversacks',    #specifies the title
vertex.label.dist=0.5,            #puts the name labels slightly off the dots
vertex.frame.color='blue',         #the color of the border of the dots
vertex.label.color='black',        #the color of the name labels
vertex.label.font=1,            #the font of the name labels
vertex.label=V(net1)$name,        #specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1            #specifies the size of the font of the labels. can also be made to vary
)
plot(net1)
#!/usr/bin/env Rscript
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
library(igraph)
#Set working directory and load in data
# data1 <- readLines(file("stdin")) #read in file
setwd("~/Documents/adventofcode1/adventofcode/2020/Day7")
data1 <- readLines("exercise7.input.txt") #read in file
#-------------------
#PART 1
#-------------------
#Clean up data
bags <- vector()
to_bag <- vector()
to_bag_num <- vector()
for(a in data1){
a1 <- strsplit(a,"contain")[[1]] #split on contain
a1_2 <- strsplit(a1[2]," bags, ")[[1]]
a1_2 <- unlist(strsplit(a1_2," bag, "))
numbers <- list()
for(i in data1){
numbers <- append(numbers,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(i)), "")))))
}
numbers1 <- unlist(numbers)
bad_numbers <- seq(min(numbers1),max(numbers1),1)
bad_words <- c(" ","","bag.","bags.","bag","bags")
bad_library <- c(bad_numbers,bad_words)
isEmpty <- function(x) {
return(length(x)==0)
}
#for each element in the second half of the statement
for(x in a1_2){
bags <- append(bags,strsplit(a1[1]," bags ")[[1]])
numberofbags <- unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(x)), ""))))
numberofbags <- append(numberofbags,0)[1]
to_bag_num <- append(to_bag_num,numberofbags)
list_words <- strsplit(x," ")[[1]]
type <- list_words[!list_words %in% bad_library]
to_bag <- append(to_bag,paste(type,collapse=" "))
}
}
df <- as.data.frame(cbind(bags,to_bag_num,to_bag))
#Part 1:
# How many bag colors can eventually contain at least one shiny gold bag?
df_nozeros <- df[df$to_bag_num!=0,c(1,3)] #edge-list of bags
mat_nozeros <- as.matrix(df_nozeros)
net1<-graph.data.frame(mat_nozeros, directed=F)
# net <- graph(edges=mat_nozeros)
# plot(net, vertex.size=0, edge.arrow.size=0 )
# Inspect the data:
V(net1) #prints the list of vertices (bags)
E(net1) #prints the list of edges (relationships)
degree(net1) #print the number of edges per vertex (relationships per bag)
# First try. We can plot the graph right away but the results will usually be unsatisfactory:
plot(net1)
net1 <- V(net1)
# Plot the data.Some details about the graph can be specified in advance.
# For example we can separate some vertices (people) by color:
V(net1)$color<-ifelse(V(net1)$name=='shiny gold',"gold","black")
plot(net1,                #the graph to be plotted
layout=layout.fruchterman.reingold,    # the layout method. see the igraph documentation for details
main='Handy Haversacks',    #specifies the title
vertex.label.dist=0.5,            #puts the name labels slightly off the dots
vertex.frame.color='blue',         #the color of the border of the dots
vertex.label.color='black',        #the color of the name labels
vertex.label.font=1,            #the font of the name labels
vertex.label=V(net1)$name,        #specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1            #specifies the size of the font of the labels. can also be made to vary
)
png(filename="network.png", height=800, width=600) #call the png writer
#run the plot
dev.off()
net1<-graph.data.frame(mat_nozeros, directed=F)
V(net1) #prints the list of vertices (bags)
E(net1) #prints the list of edges (relationships)
degree(net1) #print the number of edges per vertex (relationships per bag)
plot(net1)
V(net1)$color<-ifelse(V(net1)$name=='shiny gold',"gold","black")
plot(net1,                #the graph to be plotted
layout=layout.fruchterman.reingold,    # the layout method. see the igraph documentation for details
main='Handy Haversacks',    #specifies the title
vertex.label.dist=0.5,            #puts the name labels slightly off the dots
vertex.frame.color='blue',         #the color of the border of the dots
vertex.label.color='black',        #the color of the name labels
vertex.label.font=1,            #the font of the name labels
vertex.label=V(net1)$name,        #specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1            #specifies the size of the font of the labels. can also be made to vary
)
png(filename="network.png", height=800, width=600) #call the png writer
#run the plot
dev.off()
net1
net1[]
E(net1)$weight <- df$to_bag_num
E(net1)$weight <- df_nozeros$to_bag_num
E(net1)$weight <- as.matrix(df_nozeros$to_bag_num)
E(net1)$weight <- as.vector(df_nozeros$to_bag_num)
length(E(net1)$weight)
for(j in 1:length(E(net1)$weight)){
E(net1)$weight[j] <- df[df$to_bag_num!=0,c(2)][j]
}
#!/usr/bin/env Rscript
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
library(igraph)
#Set working directory and load in data
# data1 <- readLines(file("stdin")) #read in file
setwd("~/Documents/adventofcode1/adventofcode/2020/Day7")
data1 <- readLines("exercise7.input.txt") #read in file
#-------------------
#PART 1
#-------------------
#Clean up data
bags <- vector()
to_bag <- vector()
to_bag_num <- vector()
for(a in data1){
a1 <- strsplit(a,"contain")[[1]] #split on contain
a1_2 <- strsplit(a1[2]," bags, ")[[1]]
a1_2 <- unlist(strsplit(a1_2," bag, "))
numbers <- list()
for(i in data1){
numbers <- append(numbers,unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(i)), "")))))
}
numbers1 <- unlist(numbers)
bad_numbers <- seq(min(numbers1),max(numbers1),1)
bad_words <- c(" ","","bag.","bags.","bag","bags")
bad_library <- c(bad_numbers,bad_words)
isEmpty <- function(x) {
return(length(x)==0)
}
#for each element in the second half of the statement
for(x in a1_2){
bags <- append(bags,strsplit(a1[1]," bags ")[[1]])
numberofbags <- unique(as.numeric(unlist(strsplit(gsub("[^0-9]", "", unlist(x)), ""))))
numberofbags <- append(numberofbags,0)[1]
to_bag_num <- append(to_bag_num,numberofbags)
list_words <- strsplit(x," ")[[1]]
type <- list_words[!list_words %in% bad_library]
to_bag <- append(to_bag,paste(type,collapse=" "))
}
}
df <- as.data.frame(cbind(bags,to_bag_num,to_bag))
#Part 1:
# How many bag colors can eventually contain at least one shiny gold bag?
mat <- as.matrix(df)
net1<-graph.data.frame(mat, directed=F)
V(net1) #prints the list of vertices (bags)
E(net1) #prints the list of edges (relationships)
degree(net1) #print the number of edges per vertex (relationships per bag)
plot(net1)
V(net1)$color<-ifelse(V(net1)$name=='shiny gold',"gold","black")
plot(net1,                #the graph to be plotted
layout=layout.fruchterman.reingold,    # the layout method. see the igraph documentation for details
main='Handy Haversacks',    #specifies the title
vertex.label.dist=0.5,            #puts the name labels slightly off the dots
vertex.frame.color='blue',         #the color of the border of the dots
vertex.label.color='black',        #the color of the name labels
vertex.label.font=1,            #the font of the name labels
vertex.label=V(net1)$name,        #specifies the lables of the vertices. in this case the 'name' attribute is used
vertex.label.cex=1            #specifies the size of the font of the labels. can also be made to vary
)
png(filename="network.png", height=800, width=600) #call the png writer
#run the plot
dev.off()
for(j in 1:length(E(net1)$weight)){
E(net1)$weight[j] <- df$to_bag_num[j]
}
