((x[2]-x[1]-1)/2) + x[1]
))
}
charB <-function(x){ #take the upper half
return(c(((x[2]-x[1]+1)/2) + x[1],
x[2]))
}
charL <- charF #take the lower half
charR <- charB #take the upper half
# The first 7 characters will either be F or B;
# these specify exactly one of the 128 rows on the plane
# (numbered 0 through 127).
rowVector <- c(0,127)
# The last three characters will be either L or R;
# these specify exactly one of the 8 columns of seats on the plane
# (numbered 0 through 7)
colVector <- c(0,7)
row_ <- list()
column_ <- list()
for (x in data1) {
xsplit <- strsplit(x,"")[[1]]
for (y in xsplit){
if(y=="F"){
rowVector <- charF(rowVector)
}else if(y=="B"){
rowVector <- charB(rowVector)
}else if(y=="L"){
colVector <- charL(colVector)
}else if(y=="R"){
colVector <- charR(colVector)
}
}
if(xsplit[7]=="F"){
row_ <- append(row_,rowVector[1])
}else{
row_ <- append(row_,rowVector[2])
}
if(xsplit[10]=="L"){
column_ <- append(column_,colVector[1])
}else{
column_ <- append(column_,colVector[2])
}
}
column_
column_[1]
column_[2]
data1[2]
x <- data1[2]
xsplit <- strsplit(x,"")[[1]]
for (y in xsplit){
if(y=="F"){
rowVector <- charF(rowVector)
}else if(y=="B"){
rowVector <- charB(rowVector)
}else if(y=="L"){
colVector <- charL(colVector)
}else if(y=="R"){
colVector <- charR(colVector)
}
}
row_
#-------------------
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load In Data
# set(wd)
setwd("~/Documents/adventofcode1/adventofcode/2020/Day5")
# data1 <- readLines(file("stdin")) #read in file
data1 <- readLines("exercise5.input.txt")
#-------------------
#PART 1
#-------------------
#FUNCTIONS FOR EACH LETTER
charF <-function(x){ #take the lower half
return(c(x[1],
((x[2]-x[1]-1)/2) + x[1]
))
}
charB <-function(x){ #take the upper half
return(c(((x[2]-x[1]+1)/2) + x[1],
x[2]))
}
charL <- charF #take the lower half
charR <- charB #take the upper half
# The first 7 characters will either be F or B;
# these specify exactly one of the 128 rows on the plane
# (numbered 0 through 127).
rowVector <- c(0,127)
# The last three characters will be either L or R;
# these specify exactly one of the 8 columns of seats on the plane
# (numbered 0 through 7)
colVector <- c(0,7)
row_ <- list()
column_ <- list()
row_ <- vector()
column_ <- vector()
x <- data1[2]
x
xsplit <- strsplit(x,"")[[1]]
xsplit
for (y in xsplit){
if(y=="F"){
rowVector <- charF(rowVector)
}else if(y=="B"){
rowVector <- charB(rowVector)
}else if(y=="L"){
colVector <- charL(colVector)
}else if(y=="R"){
colVector <- charR(colVector)
}
}
colVector
rowVector
if(xsplit[7]=="F"){
row_ <- append(row_,rowVector[1])
}else{
row_ <- append(row_,rowVector[2])
}
if(xsplit[10]=="L"){
column_ <- append(column_,colVector[1])
}else{
column_ <- append(column_,colVector[2])
}
row_
column_
#-------------------
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load In Data
# set(wd)
setwd("~/Documents/adventofcode1/adventofcode/2020/Day5")
# data1 <- readLines(file("stdin")) #read in file
data1 <- readLines("exercise5.input.txt")
#-------------------
#PART 1
#-------------------
#FUNCTIONS FOR EACH LETTER
charF <-function(x){ #take the lower half
return(c(x[1],
((x[2]-x[1]-1)/2) + x[1]
))
}
charB <-function(x){ #take the upper half
return(c(((x[2]-x[1]+1)/2) + x[1],
x[2]))
}
charL <- charF #take the lower half
charR <- charB #take the upper half
# The first 7 characters will either be F or B;
# these specify exactly one of the 128 rows on the plane
# (numbered 0 through 127).
rowVector <- c(0,127)
# The last three characters will be either L or R;
# these specify exactly one of the 8 columns of seats on the plane
# (numbered 0 through 7)
colVector <- c(0,7)
row_ <- vector()
column_ <- vector()
for (x in data1) {
xsplit <- strsplit(x,"")[[1]]
for (y in xsplit){
if(y=="F"){
rowVector <- charF(rowVector)
}else if(y=="B"){
rowVector <- charB(rowVector)
}else if(y=="L"){
colVector <- charL(colVector)
}else if(y=="R"){
colVector <- charR(colVector)
}
}
if(xsplit[7]=="F"){
row_ <- append(row_,rowVector[1])
}else{
row_ <- append(row_,rowVector[2])
}
if(xsplit[10]=="L"){
column_ <- append(column_,colVector[1])
}else{
column_ <- append(column_,colVector[2])
}
}
row_[1:10]
xsplit
for (y in xsplit){print(y)}
y <- xsplit[1]
y
#-------------------
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load In Data
# set(wd)
setwd("~/Documents/adventofcode1/adventofcode/2020/Day5")
# data1 <- readLines(file("stdin")) #read in file
data1 <- readLines("exercise5.input.txt")
#-------------------
#PART 1
#-------------------
#FUNCTIONS FOR EACH LETTER
charF <-function(x){ #take the lower half
return(c(x[1],
((x[2]-x[1]-1)/2) + x[1]
))
}
charB <-function(x){ #take the upper half
return(c(((x[2]-x[1]+1)/2) + x[1],
x[2]))
}
charL <- charF #take the lower half
charR <- charB #take the upper half
# The first 7 characters will either be F or B;
# these specify exactly one of the 128 rows on the plane
# (numbered 0 through 127).
rowVector <- c(0,127)
# The last three characters will be either L or R;
# these specify exactly one of the 8 columns of seats on the plane
# (numbered 0 through 7)
colVector <- c(0,7)
row_ <- vector()
column_ <- vector()
x <- data1[1]
xsplit <- strsplit(x,"")[[1]]
y <- xsplit[1]
if(y=="F"){
rowVector <- charF(rowVector)
}else if(y=="B"){
rowVector <- charB(rowVector)
}else if(y=="L"){
colVector <- charL(colVector)
}else if(y=="R"){
colVector <- charR(colVector)
}
rowVector
colVector
#-------------------
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load In Data
# set(wd)
setwd("~/Documents/adventofcode1/adventofcode/2020/Day5")
# data1 <- readLines(file("stdin")) #read in file
data1 <- readLines("exercise5.input.txt")
#-------------------
#PART 1
#-------------------
#FUNCTIONS FOR EACH LETTER
charF <-function(x){ #take the lower half
return(c(x[1],
((x[2]-x[1]-1)/2) + x[1]
))
}
charB <-function(x){ #take the upper half
return(c(((x[2]-x[1]+1)/2) + x[1],
x[2]))
}
charL <- charF #take the lower half
charR <- charB #take the upper half
row_ <- vector()
column_ <- vector()
for (x in data1) {
rowVector <- c(0,127)
colVector <- c(0,7)
xsplit <- strsplit(x,"")[[1]]
for (y in xsplit){
if(y=="F"){
rowVector <- charF(rowVector)
}else if(y=="B"){
rowVector <- charB(rowVector)
}else if(y=="L"){
colVector <- charL(colVector)
}else if(y=="R"){
colVector <- charR(colVector)
}
}
if(xsplit[7]=="F"){
row_ <- append(row_,rowVector[1])
}else{
row_ <- append(row_,rowVector[2])
}
if(xsplit[10]=="L"){
column_ <- append(column_,colVector[1])
}else{
column_ <- append(column_,colVector[2])
}
}
row_[1:10]
column_[1:10]
#Part 1: Highest seat ID
part1 <- max(8*row_+column_) #multiply the row by 8, then add the column
part1
#Part 2:
listIDs <- 8*row_+column_
listIDs
sort(listIDs)
seq(0,7)
#IDs possible on the plane
possibleIDs <- 8*seq(0,7)*seq(0,128)
for(i in seq(0,7)){
possibleIDs <- 8*i*seq(0,128)
}
possibleIDs
sort(possibleIDs)
#IDs possible on the plane
for(i in seq(0,7)){
for(j in seq(0,127))
possibleIDs <- 8*i*j
sort(possibleIDs)
}
#IDs possible on the plane
possibleIDs <- vector()
for(i in seq(0,7)){
for(j in seq(0,127)){
possibleIDs <- append(possibleIDs,8*i*j)
}
}
sort(possibleIDs)
listIDs
length(listIDs)
length(possibleIDs)
possibleIDs[!possibleIDs %in% listIDs]
possibleIDs[!listIDs %in% possibleIDs]
possibleIDs[listIDs %in% possibleIDs]
someIDs <- possibleIDs[listIDs %in% possibleIDs]
someIDs <- sort(someIDs)
someIDs
listIDs
listIDs <- sort(listIDs)
#-------------------
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load In Data
# set(wd)
setwd("~/Documents/adventofcode1/adventofcode/2020/Day5")
# data1 <- readLines(file("stdin")) #read in file
data1 <- readLines("exercise5.input.txt")
#-------------------
#PART 1
#-------------------
#FUNCTIONS FOR EACH LETTER
charF <-function(x){ #take the lower half
return(c(x[1],
((x[2]-x[1]-1)/2) + x[1]
))
}
charB <-function(x){ #take the upper half
return(c(((x[2]-x[1]+1)/2) + x[1],
x[2]))
}
charL <- charF #take the lower half
charR <- charB #take the upper half
row_ <- vector()
column_ <- vector()
for (x in data1) {
rowVector <- c(0,127)
colVector <- c(0,7)
xsplit <- strsplit(x,"")[[1]]
for (y in xsplit){
if(y=="F"){
rowVector <- charF(rowVector)
}else if(y=="B"){
rowVector <- charB(rowVector)
}else if(y=="L"){
colVector <- charL(colVector)
}else if(y=="R"){
colVector <- charR(colVector)
}
}
if(xsplit[7]=="F"){
row_ <- append(row_,rowVector[1])
}else{
row_ <- append(row_,rowVector[2])
}
if(xsplit[10]=="L"){
column_ <- append(column_,colVector[1])
}else{
column_ <- append(column_,colVector[2])
}
}
row_[1:10]
column_[1:10]
#Part 1: Highest seat ID
part1 <- max(8*row_+column_) #multiply the row by 8, then add the column
#Part 2:
#IDs that I have
listIDs <- 8*row_+column_
listIDs <- sort(listIDs)
#IDs possible on the plane
possibleIDs <- vector()
for(i in seq(0,7)){
for(j in seq(0,127)){
possibleIDs <- append(possibleIDs,8*i*j)
}
}
possibleIDs <- sort(possibleIDs)
someIDs <- possibleIDs[listIDs %in% possibleIDs]
someIDs <- sort(someIDs)
listIDs
someIDs <- possibleIDs[seq(15,947) %in% possibleIDs]
someIDs <- sort(someIDs)
someIDs
seq(15,947)
#All IDs
allIDs <- seq(listIDs[1],listIDs[2])
seq(listIDs[1],listIDs[2])
#All IDs
allIDs <- seq(listIDs[1],listIDs[length(listIDs)])
allIDs[listIDs %in% allIDs]
allIDs[!listIDs %in% allIDs]
listIDs
plot(listIDs)
is.element(900, allIDs)
is.element(listIDs, allIDs)
help(is.element)
allIDs[is.element(listIDs, allIDs)]
allIDs[!is.element(listIDs, allIDs)]
listIDs
length(listIDs)
length(allIDs)
"%w/o%" <- function(x, y) x[!x %in% y]
allIDs[listIDs %w/o% allIDs]
part1
#IDs that I have
listIDs <- 8*row_+column_
listIDs <- sort(listIDs)
#All IDs
allIDs <- seq(listIDs[1],listIDs[length(listIDs)])
#-------------------
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory and load In Data
# set(wd)
setwd("~/Documents/adventofcode1/adventofcode/2020/Day5")
# data1 <- readLines(file("stdin")) #read in file
data1 <- readLines("exercise5.input.txt")
#-------------------
#PART 1
#-------------------
#FUNCTIONS FOR EACH LETTER
charF <-function(x){ #take the lower half
return(c(x[1],
((x[2]-x[1]-1)/2) + x[1]
))
}
charB <-function(x){ #take the upper half
return(c(((x[2]-x[1]+1)/2) + x[1],
x[2]))
}
charL <- charF #take the lower half
charR <- charB #take the upper half
row_ <- vector()
column_ <- vector()
for (x in data1) {
rowVector <- c(0,127)
colVector <- c(0,7)
xsplit <- strsplit(x,"")[[1]]
for (y in xsplit){
if(y=="F"){
rowVector <- charF(rowVector)
}else if(y=="B"){
rowVector <- charB(rowVector)
}else if(y=="L"){
colVector <- charL(colVector)
}else if(y=="R"){
colVector <- charR(colVector)
}
}
if(xsplit[7]=="F"){
row_ <- append(row_,rowVector[1])
}else{
row_ <- append(row_,rowVector[2])
}
if(xsplit[10]=="L"){
column_ <- append(column_,colVector[1])
}else{
column_ <- append(column_,colVector[2])
}
}
row_[1:10]
column_[1:10]
#Part 1: Highest seat ID
part1 <- max(8*row_+column_) #multiply the row by 8, then add the column
#Part 2:
#IDs that I have
listIDs <- 8*row_+column_
# listIDs <- sort(listIDs)
#All IDs
allIDs <- seq(listIDs[1],listIDs[length(listIDs)])
#Which ID is mine?
allIDs[!listIDs %in% allIDs]
#IDs that I have
listIDs <- 8*row_+column_
listIDs
#IDs that I have
listIDs <- 8*row_+column_
listIDs <- sort(listIDs)
#All IDs
allIDs <- seq(listIDs[1],listIDs[length(listIDs)])
#Which ID is mine?
allIDs[!listIDs %in% allIDs]
setdiff(allIDs,listIDs)
