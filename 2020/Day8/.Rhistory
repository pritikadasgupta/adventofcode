#model with race and group
linearModel_q82 <- lm(Birthweight ~ Group + xB + x0, data = data_OPT_Study_Person_level_Data)
#remove NAs
bw <- data_OPT_Study_Person_level_Data$Birthweight[!is.na(data_OPT_Study_Person_level_Data$Birthweight)]
# data_OPT_Study_Person_level_Data$Birthweight[complete.cases(data_OPT_Study_Person_level_Data$Birthweight)]
#
# na.omit(data_OPT_Study_Person_level_Data$Birthweight)
#mean of birthweight
mu_Birthweight <- mean(bw)
SST_f <- sum(((bw - mu_Birthweight)^2))
SST_r <- sum(((bw - mu_Birthweight)^2))
SSE_f <- sum(((bw - fitted(linearModel_q81))^2))
SSE_r <- sum(((bw - fitted(linearModel_q82))^2))
SSR_f <- SST_f-SSE_f
SSR_r <- SST_r-SSE_r
n <- length(bw)
k1 <- 5
k2 <- 3
k <- k1-k2
Fstat <- ((SSR_f - SSR_r)/k)/(SSE_f/(n-k-1))
Fstat
pval  <- pf(Fstat,k1-k2,n-k1,lower.tail=FALSE)
pval
anova(linearModel_q81,linearModel_q82)
n
k
k1
k2
#model with education and race and group
linearModel_q81 <- lm(Birthweight ~ Group + xB + x0 + xE1 + xE2, data = data_OPT_Study_Person_level_Data)
anova(linearModel_q81)
#model with race and group
linearModel_q82 <- lm(Birthweight ~ Group + xB + x0, data = data_OPT_Study_Person_level_Data)
#remove NAs
bw <- data_OPT_Study_Person_level_Data$Birthweight[!is.na(data_OPT_Study_Person_level_Data$Birthweight)]
# data_OPT_Study_Person_level_Data$Birthweight[complete.cases(data_OPT_Study_Person_level_Data$Birthweight)]
#
# na.omit(data_OPT_Study_Person_level_Data$Birthweight)
#mean of birthweight
mu_Birthweight <- mean(bw)
SST_f <- sum(((bw - mu_Birthweight)^2))
SST_r <- sum(((bw - mu_Birthweight)^2))
SSE_f <- sum(((bw - fitted(linearModel_q81))^2))
SSE_r <- sum(((bw - fitted(linearModel_q82))^2))
SSR_f <- SST_f-SSE_f
SSR_r <- SST_r-SSE_r
n <- length(bw)
k1 <- 5
k2 <- 3
k <- k1-k2
Fstat <- ((SSR_f - SSR_r)/k)/(SSE_f/(n-k-1))
Fstat
pval  <- pf(Fstat,k1-k2,n-k1,lower.tail=FALSE)
pval
anova(linearModel_q81,linearModel_q82)
anova(linearModel_q81)
SST_f
SSE_r
SSR_f
6440+16950+155+106
259877+4693862+14932+4018+43763
help(rep)
a <- rep(0, 4)
a
length(race)
install.packages("ggplot2")
# install.packages("ggplot2")
# list of libraries
library(readxl) #read_excel()
library(psych) #pairs.panels()
library(gplots) #plotmeans()
library(car) #regression diagnostics
library(MASS) #regression diagnostics
library(gvlma) #regression diagnostics
library(psych)
#get working directory
# setwd("~/Desktop/MPH/R/HW2")
setwd("~/Documents/BIOINF2118-2020/Assignment2")
getwd()
#install excel package
#4read in the data set from Excel
library("readxl")
input_file_xlsx <- "OPT_Study_Person-level_Data.xlsx" #inputs the name
mydata_xlsx <- read_excel(input_file_xlsx) #now the actual file is being imported
input_file_xlsx <- "OPT_Study_Person-level_Data.xlsx"
# this function, read_excel(), is from the "readxl" package
data_OPT_Study_Person_level_Data <- read_excel(input_file_xlsx)
#get working directory
# setwd("~/Desktop/MPH/R/HW2")
setwd("~/Documents/BIOINF2118-2020/Assignment2")
getwd()
#install excel package
#4read in the data set from Excel
library("readxl")
input_file_xlsx <- "OPT_Study_Person-level_Data.xlsx" #inputs the name
mydata_xlsx <- read_excel(input_file_xlsx) #now the actual file is being imported
View(mydata_xlsx)
#5Create a single variable for race that has the values Black, White
#Nat.Am or Asian depending on which of those original race variables was es
#5a First get rid of the space in “Nat Am” with the command:
colnames(mydata_xlsx)[colnames(mydata_xlsx)=="Nat Am"]<-"Nat.Am"
#5b create a 1-word name for each race. For instance, the following command assigns
#the variable Black to a single variable name
Black=mydata_xlsx$Black
White=mydata_xlsx$White
Nat.Am=mydata_xlsx$Nat.Am
Asian=mydata_xlsx$Asian
Birthweight=mydata_xlsx$Birthweight
Group=mydata_xlsx$Group
#5c create a varaible name to capture all categories using the following command
race = matrix(NA,nrow(mydata_xlsx),1)
#5d for each race, associate an answer of "Yes" with that race.
#assign all observations with Black = "Yes" to be race = "Black" using this command
race[Black=="Yes"] = "Black"
race[White=="Yes"& Black=="No"] = "White"
race[Asian=="Yes"] = "Other"
race[Nat.Am=="Yes"] = "Other"
table(race)
#Error due to NAs, would have to remove from birthweight
#is.Na
BW <- mydata_xlsx$Birthweight[!is.na(mydata_xlsx$Birthweight)]
GP <- mydata_xlsx$Group[!is.na(mydata_xlsx$Birthweight)]
linearModel <- lm(Birthweight ~ Group, data = mydata_xlsx)
summary(linearModel)
plot(GP, BW, xlim=c(0, 1))
abline(linearModel)
legend("topleft", bty="n", legend=paste("R-squared:", format(summary(linearModel)$adj.r.squared, digits=4)))
confint(linearModel)
help(confint) #, level =0.99
length(race)
xB = rep(0, 823) #creates a vector that repeats 0 the length of race
xB[race="White"]=0
xB[race="Black"]=1
xB[race="Other"]=0
xO = rep(0, length(race)) #creates a vector that repeats 0 the length of race
xO[race="White"]=0
xO[race="Black"]=0
xO[race="Other"]=1
mydata_xlsx$xB <-xB
length(xB)
xB = rep(0, 823) #creates a vector that repeats 0 the length of race
length(xB)
xB[race="White"]=0
race="White"
#5Create a single variable for race that has the values Black, White
#Nat.Am or Asian depending on which of those original race variables was es
#5a First get rid of the space in “Nat Am” with the command:
colnames(mydata_xlsx)[colnames(mydata_xlsx)=="Nat Am"]<-"Nat.Am"
#5b create a 1-word name for each race. For instance, the following command assigns
#the variable Black to a single variable name
Black=mydata_xlsx$Black
White=mydata_xlsx$White
Nat.Am=mydata_xlsx$Nat.Am
Asian=mydata_xlsx$Asian
Birthweight=mydata_xlsx$Birthweight
Group=mydata_xlsx$Group
#5c create a varaible name to capture all categories using the following command
race = matrix(NA,nrow(mydata_xlsx),1)
#5d for each race, associate an answer of "Yes" with that race.
#assign all observations with Black = "Yes" to be race = "Black" using this command
race[Black=="Yes"] = "Black"
race[White=="Yes"& Black=="No"] = "White"
race[Asian=="Yes"] = "Other"
race[Nat.Am=="Yes"] = "Other"
table(race)
length(race)
xB = rep(0, 823) #creates a vector that repeats 0 the length of race
xB[race=="White"]=0
xB[race=="Black"]=1
xB[race=="Other"]=0
xO = rep(0, length(race)) #creates a vector that repeats 0 the length of race
xO[race=="White"]=0
xO[race=="Black"]=0
xO[race=="Other"]=1
mydata_xlsx$xB <-xB
mydata_xlsx$xO <-xO
nrow(mydata_xlsx)
# install.packages("waffle") #to install the package
library(waffle)
library(ggplot2)
waffle(c(50, 30, 15, 5), rows = 10, title = "Your Title")
parts <- c(`Left-wing`=(25), `Uncertain`=30, `Right-wing`=45)
waffle1<- waffle(parts, rows=10, size=1, colors=c("#969696", "#1879bf", "#009bda"),
title="Another Waffle",
xlab="")
waffle1
waffle1 +
ylab("") +
xlab("Squares indicate percentages.") +
ggtitle("Fake voting intention")
# We need first more Fonts for R. Install first in case your using it the first time.
library(extrafont)
#Import all fonts from your working machine
font_import()
# check that Font Awesome is really imported
fonts()[grep("Awesome", fonts())]
# use this command if things look odd in RStudio under Windows
loadfonts()
#Let's depict kids!
waffle(c(50, 30, 15, 5), rows = 10, use_glyph = "child", glyph_size = 6,
title = "Some meaningful Title")
#Let's depict more!
waffle(c(25, 30, 45), rows = 10, use_glyph = "university", glyph_size = 16,
colors=c("#969696", "#1879bf", "#009bda"),
xlab="",
title = "")
install.packages("palmerpenguins")
# install.packages("palmerpenguins")
library(palmerpenguins)
data(package = 'palmerpenguins')
head(penguins)
head(penguins_raw)
library(tidyverse)
penguins %>%
count(species)
penguins %>%
group_by(species) %>%
summarize(across(where(is.numeric), mean, na.rm = TRUE))
vignette("art")
citation("palmerpenguins")
visdat::vis_dat(penguins)
library(visdat)
visdat::vis_dat(penguins)
library(dplyr)
library(ggplot2)
theme_set(theme_minimal())
penguins %>%
dplyr::select(where(is.factor)) %>%
glimpse()
# Count penguins for each species / island
penguins %>%
count(species, island, .drop = FALSE)
penguins %>%
group_by(species) %>%
summarize(across(c(bill_depth_mm, bill_length_mm),
mean,
na.rm = TRUE))
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +
geom_point() +
scale_colour_manual(values = c("darkorange","purple","cyan4"))
#!/usr/bin/env Rscript
#clear workspace
rm(list = ls())
#Libraries
# library(tidyverse)
# library(igraph)
#Set working directory and load in data
# data1 <- readLines(file("stdin")) #read in file
setwd("~/Documents/adventofcode1/adventofcode/2020/Day8")
data1 <- readLines("exercise8.input.txt") #read in file
#-------------------------------------------------------------------------
#Clean up data
#-------------------------------------------------------------------------
dat = as.data.frame(do.call(rbind, strsplit(data1, split=" ")), stringsAsFactors=FALSE)
names(dat) = c("operation","argument")
'%!in%' <- function(x,y)!('%in%'(x,y))
#-------------------------------------------------------------------------
#PART 1
#-------------------------------------------------------------------------
# Each instruction consists of an operation (acc, jmp, or nop)
# and an argument (a signed number like +4 or -20).
accumulator <- 0 #accumulator starts at 0
i=1 #position marker
i_vector <- vector()
dontstop = 100
while(dontstop >0){
#check to see if this operation has been operated on
if(i %!in% i_vector){
dontstop = 100
}else{
dontstop = -1
break
}
i_vector <- append(i_vector,i)
#get operation and argument
curr_operation <- dat[i,1]
curr_argument <- dat[i,2]
# curr_argument_num <- as.numeric(gsub("([0-9]{1,4}).*","\\1",  curr_argument))
curr_argument_num <- as.numeric(curr_argument)
curr_argument_sign <- strsplit(curr_argument, "")[[1]][1]
if(curr_operation == "acc"){
i=i+1
accumulator=accumulator+curr_argument_num
}else if(curr_operation == "jmp"){
i=i+curr_argument_num
print(paste(i-curr_argument_num,"jumps to",i))
}else if(curr_operation == "nop"){
i=i+1
print(paste(i-1,"jumps to (nop)",i))
}
}
print(paste("Part 1:",accumulator))
#-------------------------------------------------------------------------
#PART 2
#-------------------------------------------------------------------------
idx_nopjmp <- which(dat$operation=="nop" | dat$operation=="jmp")
j_vector <- vector()
for(k in 1:length(idx_nopjmp)){
j <- idx_nopjmp[k]
newdat <- dat
if(newdat$operation[j]=="nop"){
newdat$operation[j]="jmp"
}else if(newdat$operation[j]=="jmp"){
newdat$operation[j]="nop"
}
accumulator <- 0 #accumulator starts at 0
i=1 #position marker
i_vector <- vector()
dontstop = 100
while(dontstop >0){
#check to see if this operation has been operated on
if(i %!in% i_vector){
dontstop = 100
}else{
dontstop = -1
j_vector <- append(j_vector,j)
print(paste(j,"idx doesn't work",dontstop))
break
}
i_vector <- append(i_vector,i)
#get operation and argument
curr_operation <- newdat[i,1]
curr_argument <- newdat[i,2]
# curr_argument_num <- as.numeric(gsub("([0-9]{1,4}).*","\\1",  curr_argument))
curr_argument_num <- as.numeric(curr_argument)
curr_argument_sign <- strsplit(curr_argument, "")[[1]][1]
if(curr_operation == "acc"){
i=i+1
accumulator=accumulator+curr_argument_num
}else if(curr_operation == "jmp"){
i=i+curr_argument_num
}else if(curr_operation == "nop"){
i=i+1
}
}
}
#------
k=setdiff(idx_nopjmp,j_vector)
#-------
j <- idx_nopjmp[k]
newdat <- dat
if(newdat$operation[j]=="nop"){
newdat$operation[j]="jmp"
}else if(newdat$operation[j]=="jmp"){
newdat$operation[j]="nop"
}
accumulator <- 0 #accumulator starts at 0
i=1 #position marker
i_vector <- vector()
dontstop = 100
while(dontstop >0){
#check to see if this operation has been operated on
if(i %!in% i_vector){
dontstop = 100
}else{
dontstop = -1
j_vector <- append(j_vector,j)
print(paste(j,"idx doesn't work",dontstop))
break
}
i_vector <- append(i_vector,i)
#get operation and argument
curr_operation <- newdat[i,1]
curr_argument <- newdat[i,2]
# curr_argument_num <- as.numeric(gsub("([0-9]{1,4}).*","\\1",  curr_argument))
curr_argument_num <- as.numeric(curr_argument)
curr_argument_sign <- strsplit(curr_argument, "")[[1]][1]
if(curr_operation == "acc"){
i=i+1
accumulator=accumulator+curr_argument_num
}else if(curr_operation == "jmp"){
i=i+curr_argument_num
}else if(curr_operation == "nop"){
i=i+1
}
}
print(paste("Part 2:",accumulator))
#!/usr/bin/env Rscript
#clear workspace
rm(list = ls())
#Libraries
# library(tidyverse)
# library(igraph)
#Set working directory and load in data
# data1 <- readLines(file("stdin")) #read in file
setwd("~/Documents/adventofcode1/adventofcode/2020/Day8")
data1 <- readLines("exercise8.input.txt") #read in file
#-------------------------------------------------------------------------
#Clean up data
#-------------------------------------------------------------------------
dat = as.data.frame(do.call(rbind, strsplit(data1, split=" ")), stringsAsFactors=FALSE)
names(dat) = c("operation","argument")
'%!in%' <- function(x,y)!('%in%'(x,y))
#-------------------------------------------------------------------------
#PART 1
#-------------------------------------------------------------------------
# Each instruction consists of an operation (acc, jmp, or nop)
# and an argument (a signed number like +4 or -20).
accumulator <- 0 #accumulator starts at 0
i=1 #position marker
i_vector <- vector()
dontstop = 100
while(dontstop >0){
#check to see if this operation has been operated on
if(i %!in% i_vector){
dontstop = 100
}else{
dontstop = -1
break
}
i_vector <- append(i_vector,i)
#get operation and argument
curr_operation <- dat[i,1]
curr_argument <- dat[i,2]
# curr_argument_num <- as.numeric(gsub("([0-9]{1,4}).*","\\1",  curr_argument))
curr_argument_num <- as.numeric(curr_argument)
curr_argument_sign <- strsplit(curr_argument, "")[[1]][1]
if(curr_operation == "acc"){
i=i+1
accumulator=accumulator+curr_argument_num
}else if(curr_operation == "jmp"){
i=i+curr_argument_num
print(paste(i-curr_argument_num,"jumps to",i))
}else if(curr_operation == "nop"){
i=i+1
print(paste(i-1,"jumps to (nop)",i))
}
}
print(paste("Part 1:",accumulator))
#-------------------------------------------------------------------------
#PART 2
#-------------------------------------------------------------------------
idx_nopjmp <- which(dat$operation=="nop" | dat$operation=="jmp")
j_vector <- vector()
for(k in 1:length(idx_nopjmp)){
j <- idx_nopjmp[k]
newdat <- dat
if(newdat$operation[j]=="nop"){
newdat$operation[j]="jmp"
}else if(newdat$operation[j]=="jmp"){
newdat$operation[j]="nop"
}
accumulator <- 0 #accumulator starts at 0
i=1 #position marker
i_vector <- vector()
dontstop = 100
while(dontstop >0){
#check to see if this operation has been operated on
if(i %!in% i_vector){
dontstop = 100
}else{
dontstop = -1
j_vector <- append(j_vector,j)
print(paste(j,"idx doesn't work",dontstop))
break
}
i_vector <- append(i_vector,i)
#get operation and argument
curr_operation <- newdat[i,1]
curr_argument <- newdat[i,2]
# curr_argument_num <- as.numeric(gsub("([0-9]{1,4}).*","\\1",  curr_argument))
curr_argument_num <- as.numeric(curr_argument)
curr_argument_sign <- strsplit(curr_argument, "")[[1]][1]
if(curr_operation == "acc"){
i=i+1
accumulator=accumulator+curr_argument_num
}else if(curr_operation == "jmp"){
i=i+curr_argument_num
}else if(curr_operation == "nop"){
i=i+1
}
}
}
k
j <- idx_nopjmp[k]
newdat <- dat
if(newdat$operation[j]=="nop"){
newdat$operation[j]="jmp"
}else if(newdat$operation[j]=="jmp"){
newdat$operation[j]="nop"
}
accumulator <- 0 #accumulator starts at 0
i=1 #position marker
i_vector <- vector()
dontstop = 100
while(dontstop >0){
#check to see if this operation has been operated on
if(i %!in% i_vector){
dontstop = 100
}else{
dontstop = -1
j_vector <- append(j_vector,j)
print(paste(j,"idx doesn't work",dontstop))
break
}
i_vector <- append(i_vector,i)
#get operation and argument
curr_operation <- newdat[i,1]
curr_argument <- newdat[i,2]
# curr_argument_num <- as.numeric(gsub("([0-9]{1,4}).*","\\1",  curr_argument))
curr_argument_num <- as.numeric(curr_argument)
curr_argument_sign <- strsplit(curr_argument, "")[[1]][1]
if(curr_operation == "acc"){
i=i+1
accumulator=accumulator+curr_argument_num
}else if(curr_operation == "jmp"){
i=i+curr_argument_num
}else if(curr_operation == "nop"){
i=i+1
}
}
print(paste("Part 2:",accumulator))
