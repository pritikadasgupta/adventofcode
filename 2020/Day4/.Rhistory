colnames(mydata_xlsx)[colnames(mydata_xlsx)=="Nat Am"]<-"Nat.Am"
#5b create a 1-word name for each race. For instance, the following command assigns
#the variable Black to a single variable name
Black=mydata_xlsx$Black
White=mydata_xlsx$White
Nat.Am=mydata_xlsx$Nat.Am
Asian=mydata_xlsx$Asian
Birthweight=mydata_xlsx$Birthweight
Group=mydata_xlsx$Group
#5c create a varaible name to capture all categories using the following command
race = matrix(NA,nrow(mydata_xlsx),1)
#5d for each race, associate an answer of "Yes" with that race.
#assign all observations with Black = "Yes" to be race = "Black" using this command
race[Black=="Yes"] = "Black"
race[White=="Yes"& Black=="No"] = "White"
race[Asian=="Yes"] = "Other"
race[Nat.Am=="Yes"] = "Other"
table(race)
#Error due to NAs, would have to remove from birthweight
#is.Na
BW <- mydata_xlsx$Birthweight[!is.na(mydata_xlsx$Birthweight)]
GP <- mydata_xlsx$Group[!is.na(mydata_xlsx$Birthweight)]
linearModel <- lm(Birthweight ~ Group, data = mydata_xlsx)
summary(linearModel)
plot(GP, BW, xlim=c(0, 1))
abline(linearModel)
legend("topleft", bty="n", legend=paste("R-squared:", format(summary(linearModel)$adj.r.squared, digits=4)))
confint(linearModel)
help(confint) #, level =0.99
length(race)
xB = rep(0, 823) #creates a vector that repeats 0 the length of race
xB[race="White"]=0
xB[race="Black"]=1
xB[race="Other"]=0
xO = rep(0, length(race)) #creates a vector that repeats 0 the length of race
xO[race="White"]=0
xO[race="Black"]=0
xO[race="Other"]=1
mydata_xlsx$xB <-xB
length(xB)
xB = rep(0, 823) #creates a vector that repeats 0 the length of race
length(xB)
xB[race="White"]=0
race="White"
#5Create a single variable for race that has the values Black, White
#Nat.Am or Asian depending on which of those original race variables was es
#5a First get rid of the space in “Nat Am” with the command:
colnames(mydata_xlsx)[colnames(mydata_xlsx)=="Nat Am"]<-"Nat.Am"
#5b create a 1-word name for each race. For instance, the following command assigns
#the variable Black to a single variable name
Black=mydata_xlsx$Black
White=mydata_xlsx$White
Nat.Am=mydata_xlsx$Nat.Am
Asian=mydata_xlsx$Asian
Birthweight=mydata_xlsx$Birthweight
Group=mydata_xlsx$Group
#5c create a varaible name to capture all categories using the following command
race = matrix(NA,nrow(mydata_xlsx),1)
#5d for each race, associate an answer of "Yes" with that race.
#assign all observations with Black = "Yes" to be race = "Black" using this command
race[Black=="Yes"] = "Black"
race[White=="Yes"& Black=="No"] = "White"
race[Asian=="Yes"] = "Other"
race[Nat.Am=="Yes"] = "Other"
table(race)
length(race)
xB = rep(0, 823) #creates a vector that repeats 0 the length of race
xB[race=="White"]=0
xB[race=="Black"]=1
xB[race=="Other"]=0
xO = rep(0, length(race)) #creates a vector that repeats 0 the length of race
xO[race=="White"]=0
xO[race=="Black"]=0
xO[race=="Other"]=1
mydata_xlsx$xB <-xB
mydata_xlsx$xO <-xO
nrow(mydata_xlsx)
# install.packages("waffle") #to install the package
library(waffle)
library(ggplot2)
waffle(c(50, 30, 15, 5), rows = 10, title = "Your Title")
parts <- c(`Left-wing`=(25), `Uncertain`=30, `Right-wing`=45)
waffle1<- waffle(parts, rows=10, size=1, colors=c("#969696", "#1879bf", "#009bda"),
title="Another Waffle",
xlab="")
waffle1
waffle1 +
ylab("") +
xlab("Squares indicate percentages.") +
ggtitle("Fake voting intention")
# We need first more Fonts for R. Install first in case your using it the first time.
library(extrafont)
#Import all fonts from your working machine
font_import()
# check that Font Awesome is really imported
fonts()[grep("Awesome", fonts())]
# use this command if things look odd in RStudio under Windows
loadfonts()
#Let's depict kids!
waffle(c(50, 30, 15, 5), rows = 10, use_glyph = "child", glyph_size = 6,
title = "Some meaningful Title")
#Let's depict more!
waffle(c(25, 30, 45), rows = 10, use_glyph = "university", glyph_size = 16,
colors=c("#969696", "#1879bf", "#009bda"),
xlab="",
title = "")
install.packages("palmerpenguins")
# install.packages("palmerpenguins")
library(palmerpenguins)
data(package = 'palmerpenguins')
head(penguins)
head(penguins_raw)
library(tidyverse)
penguins %>%
count(species)
penguins %>%
group_by(species) %>%
summarize(across(where(is.numeric), mean, na.rm = TRUE))
vignette("art")
citation("palmerpenguins")
visdat::vis_dat(penguins)
library(visdat)
visdat::vis_dat(penguins)
library(dplyr)
library(ggplot2)
theme_set(theme_minimal())
penguins %>%
dplyr::select(where(is.factor)) %>%
glimpse()
# Count penguins for each species / island
penguins %>%
count(species, island, .drop = FALSE)
penguins %>%
group_by(species) %>%
summarize(across(c(bill_depth_mm, bill_length_mm),
mean,
na.rm = TRUE))
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +
geom_point() +
scale_colour_manual(values = c("darkorange","purple","cyan4"))
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory
path <- "~/Documents/adventofcode/Day2"
setwd(path)
#Load In Data
file <- "exercise2.input.txt"
df <- read.table(file, header = FALSE, sep = " ")
setwd("~/Documents/adventofcode1/adventofcode/2020/Day2")
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory
path <- "~/Documents/adventofcode1/adventofcode/2020/Day2"
setwd(path)
#Load In Data
file <- "exercise2.input.txt"
df <- read.table(file, header = FALSE, sep = " ")
View(df)
View(df)
#Clean up dataframe
df %>% separate(V1, c("min", "max"))
View(df)
#Clean up dataframe
df1 <- df %>% separate(V1, c("min", "max"))
View(df1)
df2 <- df1 %>% separate(V2, c("letter", NA))
View(df2)
View(df2)
help(apply)
View(df2)
View(df2)
df3 <- df2[,3:4] %>% map(countLetter) %>% bind_rows()
#Create function to count how many times a character occurs in a string
countLetter <- function(char, s){
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
df3 <- df2[,3:4] %>% map(countLetter) %>% bind_rows()
help(map)
df2[,3:4]
df3 <- df2[,3:4] %>% map(countLetter)
df2[,3:4] %>% map(countLetter)
df2[1,3:4] %>% map(countLetter)
df2[1,3:4]
df2[,3:4] %>% split(1:nrow(df2)) %>% map(countLetter)
df2[,3:4] %>% split(1:nrow(df2))
df2[1,3:4] %>% split(1:nrow(df2))
df2[,3:4] %>% split(1:nrow(df2))
df2[,3:4] %>% split(1:nrow(df2)) %>% map(countLetter)
exa <- df2[,3:4] %>% split(1:nrow(df2))
View(exa)
View(exa)
exa[1]
countLetter(exa[1])
exa[1][1]
exa[1][2]
exa[1][1][1]
exa[[1]]
exa[1]
exa[1]$1
View(exa)
View(exa)
exa[1]$letter
exa[[1]]$letter
exa[[1]]$V3
#Create function to count how many times a character occurs in a string
countLetter <- function(x){
char <- x[[1]]$letter
s <- x[[1]]$V3
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
df2[,3:4] %>% split(1:nrow(df2)) %>% map(countLetter)
x[[1]][,1]
exa[1]][,1]
exa[[1]][,1]
#Create function to count how many times a character occurs in a string
countLetter <- function(x){
char <- x[[1]][,1]
s <- x[[1]][,2]
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
exa <- df2[,3:4] %>% split(1:nrow(df2))
df2[,3:4] %>% split(1:nrow(df2)) %>% map(countLetter)
exa <- df2[1,3:4] %>% split(1:nrow(df2))
View(exa)
exa <- df2[1,3:4] %>% split(1:nrow(df2[1,3:4]))
View(exa)
exa[[1]]
exa[[1]][,1]
map(exa,countLetter)
countLetter(exa)
df2[,3:4] %>% split(1:nrow(df2)) %>% countLetter
exa <- df2[,3:4] %>% split(1:nrow(df2[,3:4]))
exa <- df2[,3:4] %>% split(1:nrow(df2[,3:4]))
df2[,3:4] %>% split(1:nrow(df2)) %>% map(countLetter)
#Create function to count how many times a character occurs in a string
countLetter <- function(x){
char <- x[[1]][,1]
s <- x[[1]][,2]
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
exa <- df2[,3:4] %>% split(1:nrow(df2[,3:4]))
countLetter(exa)
df2[,3:4] %>% split(1:nrow(df2)) %>% map(countLetter)
df2[,3:4] %>% split(1:nrow(df2)) %>% countLetter
help(across)
across(df2[,3:4],countLetter)
df2[,3:4] %>% distinct(across(countLetter))
df2[,3:4] %>% mutate_all(countLetter)
rlang::last_error()
help(mutate_all)
countLetter <- function(char,s){
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
df2[,3:4] %>% mutate_all(countLetter)
help(mutate_all)
rlang::last_error()
lapply(df2[,3:4], countLetter)
countLetter <- function(char,s){
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
lapply(df2[,3:4], countLetter)
help(lapply)
lapply(df2[1,3:4], countLetter)
df2[1,3:4]
exa <- df2[1,3:4]
exa[1]
exa[1,1]
exa[1,2]
countLetter <- function(x){
char <- x[1,1]
s <- x[1,2]
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
lapply(df2[1,3:4], countLetter)
df2[1,3:4]
countLetter(df2[1,3:4])
lapply(df2[,3:4], countLetter)
sapply(df2[,3:4], countLetter)
df2[,3:4]
apply(df2[,3:4], countLetter)
countLetter <- function(char,s){
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
apply(df2[,3:4], 1, countLetter)
countLetter <- function(x){
char <- x[1]
s <- x[2]
s2 <- gsub(char,"",s)
return (nchar(s) - nchar(s2))
}
apply(df2[,3:4], 1, countLetter)
df2$count <- apply(df2[,3:4], 1, countLetter)
View(df2)
validPassword <- function(x){
if(x[5] <= x[2] & x[5]>= x[1]){
return(1)
}else{
return(0)
}
}
df2$valid <- apply(df2, 1, validPassword)
View(exa)
View(df2)
sum(df2$valid)
View(df)
validPassword <- function(x){
if(x[5] <= x[2] && x[5]>= x[1]){
return(1)
}else{
return(0)
}
}
df2$valid <- apply(df2, 1, validPassword)
sum(df2$valid)
x <- df2[2,]
x
x[1]
x[2]
x[5] <= x[2]
x[5]>= x[1]
validPassword <- function(x){
if(x[5] <= x[2] && x[5]>= x[1]){
return(1)
}else{
return(0)
}
}
df2$valid <- apply(df2, 1, validPassword)
validPassword <- function(x){
x <- is.numeric(x)
if(x[5] <= x[2] && x[5]>= x[1]){
return(1)
}else{
return(0)
}
}
df2$valid <- apply(df2, 1, validPassword)
sum(df2$valid)
x <- is.numeric(x)
x
validPassword <- function(x){
x <- as.numeric(x)
if(x[5] <= x[2] && x[5]>= x[1]){
return(1)
}else{
return(0)
}
}
df2$valid <- apply(df2, 1, validPassword)
sum(df2$valid)
df3 <- df2[,1:4]
View(df3)
View(df3)
strsplit("abc")
strsplit("abc","")
string <- strsplit("abc","")
min <- 1
min <- 2
letter <- "b"
string[min] == letter
string[max]==letter
string[max]
max <- 2
string[max]==letter
#-------------------
#Check validity
#-------------------
validPassword2 <- function(x){
string <- strsplit(x[4],"")
min <- x[1]
max <- x[2]
letter <- x[3]
if(string[min] == letter && string[max]==letter){
return(2)
}else if(string[min] == letter || string[max]==letter){
return(1)
}else{
return(0)
}
}
df3$valid <- apply(df3, 1, validPassword2)
#-------------------
#Part 2 Answer
#-------------------
sum(df3$valid)
string <- strsplit("cqbhncccjsncqcc","")
min = 13
max = 15
string[13]
string[15]
string
string[1]
string[[1]]
#-------------------
#Check validity
#-------------------
validPassword2 <- function(x){
string <- strsplit(x[4],"")[[1]]
min <- x[1]
max <- x[2]
letter <- x[3]
if(string[min] == letter && string[max]==letter){
return(2)
}else if(string[min] == letter || string[max]==letter){
return(1)
}else{
return(0)
}
}
df3$valid <- apply(df3, 1, validPassword2)
string <- strsplit("cqbhncccjsncqcc","")[[1]]
sring
string
string[1]
string[13]
string[14]
string[15]
#-------------------
#Check validity
#-------------------
validPassword2 <- function(x){
string <- strsplit(x[4],"")[[1]]
min <- x[1]
max <- x[2]
letter <- x[3]
if(string[min] == letter && string[max]==letter){
return(2)
}else if(string[min] == letter || string[max]==letter){
return(1)
}else{
return(0)
}
}
validPassword2(df3[1,])
df3[1,]
x <- df3[1,]
x[4]
as.character(x[4])
#-------------------
#Check validity
#-------------------
validPassword2 <- function(x){
string <- strsplit(as.character(x[4]),"")[[1]]
min <- as.numeric(x[1])
max <- as.numeric(x[2])
letter <- as.character(x[3])
if(string[min] == letter && string[max]==letter){
return(2)
}else if(string[min] == letter || string[max]==letter){
return(1)
}else{
return(0)
}
}
df3$valid <- apply(df3, 1, validPassword2)
#-------------------
#Part 2 Answer
#-------------------
sum(df3$valid)
#-------------------
#Check validity
#-------------------
validPassword2 <- function(x){
string <- strsplit(as.character(x[4]),"")[[1]]
min <- as.numeric(x[1])
max <- as.numeric(x[2])
letter <- as.character(x[3])
if(string[min] == letter && string[max]==letter){
return(0)
}else if(string[min] == letter || string[max]==letter){
return(1)
}else{
return(0)
}
}
df3$valid <- apply(df3, 1, validPassword2)
#-------------------
#Part 2 Answer
#-------------------
sum(df3$valid)
#-------------------
#clear workspace
rm(list = ls())
#Libraries
library(tidyverse)
#Set working directory
path <- "~/Documents/adventofcode1/adventofcode/2020/Day4"
setwd(path)
#Load In Data
file <- "exercise4.input.txt"
df <- read.table(file, header = FALSE, sep = " ")
help(scan)
data1 <- scan(file, what = "character")
data1[1]
data[1:100]
data[c(1:100)]
data1[1:100]
data1 <- scan(file, what = list("", "", ""))
View(data1)
data1 <- scan(file, what = "character", skip = 1)
